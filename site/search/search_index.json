{"config":{"lang":["en","fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EasySwitch Documentation","text":"<ul> <li> <p> Get Started</p> <p>Set up EasySwitch and make your first API call in minutes.</p> <p>-&gt; Installation Guide</p> </li> <li> <p> API Reference</p> <p>Complete reference for all available methods and configurations.</p> <p>-&gt; API Documentation</p> </li> <li> <p> Payment Guides</p> <p>Learn how to process mobile money payments across different providers.</p> <p>-&gt; Send Payments | -&gt; Webhooks</p> </li> <li> <p> Contribute</p> <p>Help improve EasySwitch with your contributions and feedback.</p> <p>-&gt; Contribution Guide</p> </li> </ul>"},{"location":"#what-is-easyswitch","title":"What is EasySwitch?","text":"<p>EasySwitch is a unified Python SDK for integrating mobile money APIs across West Africa. It standardizes multiple payment providers behind a single interface while maintaining flexibility and security.</p> <p>Key features:</p> <ul> <li>Unified API for Bizao, PayGate, FedaPay, CinetPay, and more</li> <li>Async-first design for high performance</li> <li>Multi-source configuration (JSON, YAML, environment variables)</li> <li>Enterprise-grade security with webhook validation</li> </ul> <p>Explore further:</p> <ul> <li>GitHub Repository for source code and issues</li> <li>PyPI Package for latest releases</li> <li>Community Forum (coming soon) for support and discussions</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from easyswitch import (\n    EasySwitch, TransactionDetail, Provider,\n    TransactionStatus, Currency, TransactionType,\n    CustomerInfo\n)\n\n# Initialize client\nclient = EasySwitch.from_env()\n\n\n# Creating a Transaction\norder = TransactionDetail(\n    transaction_id = 'xveahdk-82998n9f8uhgj',\n    provider = Provider.CINETPAY,\n    status = TransactionStatus.PENDING, # Default value\n    currency = Currency.XOF,\n    amount = 150,\n    transaction_type = TransactionType.PAYMENT,  # Default value\n    reason = 'My First Transaction Test with EasySwitch\\'s CinetPay client.',\n    reference = 'my_ref',\n    customer = CustomerInfo(\n        phone_number = '+22890000000',\n        first_name = 'Wil',\n        last_name = 'Eins',\n        address = '123 Rue k\u00e9pui, Lom\u00e9', # Optional\n        city = 'Lom\u00e9',  # Optional\n    )\n)\n\n# Send mobile money payment\nresponse = client.send_payment(\n    order\n)\n\nprint(f\"Payment initiated!\")\n</code></pre>"},{"location":"assets/old_pages/index_/","title":"Welcome to EasySwitch Documentation!","text":"<p>Simplify transactions, master configurations, switch easily.</p> <p>EasySwitch is a unified Python SDK for Mobile Money integration across major aggregators in West Africa. It provides a single, consistent interface to simplify payment processing, reduce code duplication, and accelerate development.</p> <ul> <li> <p> English</p> <p>Contiue reading EasySwitch documentation in English.</p> <p>-&gt; Get started</p> </li> <li> <p> Fran\u00e7ais</p> <p>Lire la documentation de EasySwitch en Fran\u00e7ais</p> <p>-&gt; Commencer</p> </li> </ul>"},{"location":"assets/old_pages/index_/#what-is-atlasos","title":"What is AtlasOS?","text":"<p>AtlasOS, or Atlas, is an open-source project that enhances Windows by conveniently applying privacy, usability, and performance optimizations, all while maintaining functionality and customizability.</p> <p>If you'd like to learn more, see our:</p> <ul> <li>GitHub repository README for more in-depth overviews</li> <li>GitHub repository's source code for what Atlas does under the hood</li> <li>Discord server to connect with the Atlas community and get support</li> <li>Website for a general overview of Atlas</li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration","text":""},{"location":"getting-started/configuration/#configuration","title":"\u2699\ufe0f Configuration","text":"<p>EasySwitch uses a centralized configuration object to provide a flexible, type-safe, and validated configuration system that lets you control the behavior of the SDK: environment setup, payment providers, logging, and more.</p>"},{"location":"getting-started/configuration/#overview","title":"\ud83d\udd01 Overview","text":"<p>The main configuration object is RootConfig. You can load it from a file, environment variable, or any custom source via a class that extends BaseConfigSource.</p>"},{"location":"getting-started/configuration/#rootconfig","title":"\ud83d\udce6 <code>RootConfig</code>","text":"<p>The central configuration class. It defines all the required settings to run EasySwitch.</p>"},{"location":"getting-started/configuration/#attributes","title":"Attributes:","text":"Attribute Type Description <code>debug</code> <code>bool</code> Enables debug mode (more verbose logging). <code>logging</code> <code>LoggingConfig</code> Logging configuration. <code>default_currency</code> <code>str</code> Default currency for transactions (must be in the <code>Currency</code> enum). <code>providers</code> <code>Dict[Provider, ProviderConfig]</code> Dictionary of enabled payment providers. <code>default_provider</code> `Provider None` Default provider used if none is explicitly specified."},{"location":"getting-started/configuration/#providerconfig","title":"\ud83d\udd27 <code>ProviderConfig</code>","text":"<p>Represents configuration for each individual payment provider.</p>"},{"location":"getting-started/configuration/#attributes_1","title":"Attributes:","text":"Attribute Type Description <code>api_key</code> `str None` Public key or client ID. <code>api_secret</code> `str None` Private key or client secret. <code>token</code> `str None` Access token (used by some providers). <code>base_url</code> `str None` API base URL for the provider. <code>callback_url</code> `str None` URL to receive provider notifications. <code>return_url</code> `str None` URL to redirect after payment. <code>timeout</code> <code>int</code> Maximum duration of a request (in seconds). <code>environment</code> `\"sandbox\" \"production\"` Environment in which the provider should run. <code>extra</code> <code>Dict[str, Any]</code> Additional data specific to the provider."},{"location":"getting-started/configuration/#validation","title":"Validation:","text":"<ul> <li>Either <code>api_key</code> or <code>api_secret</code> must be provided.</li> <li><code>environment</code> must be either <code>\"sandbox\"</code> or <code>\"production\"</code>.</li> </ul>"},{"location":"getting-started/configuration/#loggingconfig","title":"\ud83e\uddfe <code>LoggingConfig</code>","text":"<p>Handles all SDK logging options.</p> Attribute Type Description <code>enabled</code> <code>bool</code> Enable or disable logging. <code>level</code> <code>LogLevel</code> (<code>debug</code>, <code>info</code>, etc.) Logging verbosity level. <code>file</code> `str None` File to write logs to. <code>console</code> <code>bool</code> Enable console output for logs. <code>max_size</code> <code>int</code> Max log file size (in MB). <code>backups</code> <code>int</code> Number of backup log files to keep. <code>compress</code> <code>bool</code> Whether to compress old logs. <code>format</code> <code>LogFormat</code> (<code>plain</code>, <code>json</code>) Log output format. <code>rotate</code> <code>bool</code> Enable automatic log file rotation."},{"location":"getting-started/configuration/#built-in-validation","title":"\ud83d\udd12 Built-in Validation","text":"<p>The SDK uses Pydantic to ensure strict validation of all configuration fields. If something is misconfigured, a <code>ConfigurationError</code> is raised.</p>"},{"location":"getting-started/configuration/#validation-examples","title":"Validation Examples:","text":"<pre><code># Invalid currency\ndefault_currency = \"USD\"  # Error: USD is not defined in Currency enum\n\n# Invalid default provider\ndefault_provider = \"STRIPE\"  # Error if STRIPE is not present in the `providers` dictionary\n</code></pre>"},{"location":"getting-started/configuration/#1-supported-configuration-sources","title":"1. \u2699\ufe0f Supported Configuration sources","text":"Source Description Example Environment Variables Load configs from a <code>.env</code> file or System Environment see example Native Python Dictionary Direct configuration in your code see exemple JSON File Load configs from a JSON file see example YAML File Load configs from a YAML file see example"},{"location":"getting-started/configuration/#example-of-env-file","title":"\ud83d\udd39 Example of <code>.env</code> file","text":"<pre><code># This file is a sample. Copy it to .env and fill in the values.\n\n# General configuration\nEASYSWITCH_ENVIRONMENT=sandbox                  # or production\nEASYSWITCH_TIMEOUT=30                           # seconds\nEASYSWITCH_DEBUG=true                           # Enable debug mode\n\n# Logging configuration\n# Note: Logging configuration is only used if EASYSWITCH_LOGGING is set to true\n\nEASYSWITCH_LOGGING=true                         # Enable file logging\nEASYSWITCH_LOG_LEVEL=info                       # debug, info, warning, error\nEASYSWITCH_LOG_FILE=/var/log/easyswitch.log     # Path to the log file\nEASYSWITCH_CONSOLE_LOGGING=true                 # Enable console logging\nEASYSWITCH_LOG_MAX_SIZE=10                      # Maximum size of the log file in MB\nEASYSWITCH_LOG_BACKUPS=5                        # Number of backup log files to keep\nEASYSWITCH_LOG_COMPRESS=true                    # Whether to compress old log files\nEASYSWITCH_LOG_FORMAT=plain                     # Format of the log file (plain or json)\nEASYSWITCH_LOG_ROTATE=true                      # Whether to rotate the log file\n\n# Payment gateway configuration\nEASYSWITCH_ENABLED_PROVIDERS=cinetpay,semoa     # Comma-separated list of enabled payment providers\nEASYSWITCH_DEFAULT_PROVIDER=cinetpay            # Default payment provider\nEASYSWITCH_CURRENCY=XOF                         # Default currency\n\n# Providers configuration\n# NOTE: these are standadized variables for all providers. \n\n# CINETPAY\n# Note: Only required if EASYSWITCH_ENABLED_PROVIDERS includes 'cinetpay'\n# You don't need to fill in all of these variables. Only fill in the ones you need.\nEASYSWITCH_CINETPAY_API_KEY=your_cinetpay_api_key\nEASYSWITCH_CINETPAY_X_SECRET=your_cinetpay_secret_key\nEASYSWITCH_CINETPAY_X_STIE_ID=your_cinetpay_site_id\nEASYSWITCH_CINETPAY_CALLBACK_URL=your_cinetpay_callback_url\nEASYSWITCH_CINETPAY_X_CHANNELS=ALL\nEASYSWITCH_CINETPAY_X_LANG=fr\n\n# SEMOA\n# Note: Only required if EASYSWITCH_ENABLED_PROVIDERS includes 'semoa'\n# You don't need to fill in all of these variables. Only fill in the ones you need.\nEASYSWITCH_SEMOA_API_KEY=your_semoa_api_key\nEASYSWITCH_SEMOA_X_CLIENT_ID=your_semoa_client_id\nEASYSWITCH_SEMOA_X_CLIENT_SECRET=your_semoa_client_secret\nEASYSWITCH_SEMOA_X_USERNAME=your_semoa_username\nEASYSWITCH_SEMOA_X_PASSWORD=your_semoa_password\nEASYSWITCH_SEMOA_X_CALLBACK_URL=your_semoa_callback_url   # Optional\n</code></pre>"},{"location":"getting-started/configuration/#example-of-python-dictionary","title":"\ud83d\udd39 Example of python dictionary","text":"<pre><code>from easyswitch import (\n    EasySwitch, TransactionDetail, Provider,\n    TransactionStatus, Currency, TransactionType,\n    CustomerInfo\n)\n\nconfig = {\n    \"debug\": True,\n    \"providers\": {\n        Provider.CINETPAY: {\n            \"api_key\": \"your_api_key\",\n            \"base_url\": \"https://api.exemple.com/v1\", # Optional\n            \"callback_url\": \"https://api.exemple.com/v1/callback\",\n            \"return_url\": \"https://api.exemple.com/v1/return\",\n            \"environment\": \"production\",     # Optional sandbox by default\n            \"extra\": {\n                \"secret\": \"your_secret\",\n                \"site_id\": \"your_site_id\",\n                \"channels\": \"ALL\",     # More details on Cinetpay's documentation.\n                \"lang\": \"fr\"        # More details on Cinetpay's documentation.\n            }\n        },\n        Provider.BIZAO: {\n            \"api_key\": \"your_api_key\",\n            \"base_url\": \"https://api.exemple.com/v1\", # Optional\n            \"callback_url\": \"https://api.exemple.com/v1/callback\",\n            \"return_url\": \"https://api.exemple.com/v1/return\",\n            \"environment\": \"production\",     # Optional sandbox by default\n            \"timeout\":30,\n            \"extra\": {\n                # Dev Configs\n                \"dev_client_id\": \"your_dev_client_id\",\n                \"dev_client_secret\": \"your_dev_client_secret\",\n                \"dev_token_url\": \"https://your_dev_token_url.com\",     \n\n                # Prod Configs\n                \"prod_client_id\": \"your_prod_client_id\",\n                \"prod_client_secret\": \"your_prod_client_secret\",\n                \"prod_token_url\": \"https://your_dev_token_url.com\",\n\n                # Global configs\n                \"country-code\": Countries.IVORY_COAST,\n                \"mno-name\": \"orange\",\n                \"channel\": \"web\",\n                \"lang\": \"fr\",\n                \"cancel_url\": \"https/example.com/cancel\"\n            }\n        },\n    }\n}\n\nclient = EasySwitch.from_dict(config)\n</code></pre>"},{"location":"getting-started/configuration/#configuration-from-json-file","title":"\ud83d\udd39 Configuration from JSON file","text":"<pre><code>// config.json\n{\n  \"debug\": true,\n  \"default_currency\": \"XOF\",\n  \"default_provider\": \"CINETPAY\",\n  \"logging\": {\n    \"enabled\": true,\n    \"level\": \"info\",\n    \"file\": \"logs/easyswitch.log\",\n    \"console\": true,\n    \"rotate\": true,\n    \"compress\": true,\n    \"format\": \"plain\"\n  },\n  \"providers\": {\n    \"CINETPAY\": {\n      \"api_key\": \"your_cinetpay_api_key\",\n      \"base_url\": \"https://sandbox.example.com/api\",\n      \"callback_url\": \"https://example.com/callback\",\n      \"environment\": \"sandbox\",\n      \"extra\": {\n        \"secret\": \"your_cinetpay_secret_key\",\n        \"site_id\": \"your_cinetpay_site_id\",\n        \"channels\": \"ALL\",\n        \"lang\": \"fr\"\n      }\n    },\n    \"SEMOA\": {\n      \"api_key\": \"your_semoa_api_key\",\n      \"base_url\": \"https://api.stripe.com\",\n      \"environment\": \"production\",\n      \"extra\": {\n        \"client_id\": \"your_semoa_client_id\",\n        \"client_secret\": \"your_semoa_client_secret\",\n        \"username\": \"your_semoa_username\",\n        \"password\": \"your_semoa_password\"\n      }\n    }\n  }\n}\n</code></pre> <pre><code>client = EasySwitch.from_json(\"config.json\")\n</code></pre>"},{"location":"getting-started/configuration/#configuration-from-yaml-file","title":"\ud83d\udd39 Configuration from YAML file","text":"<pre><code>debug: true\ndefault_currency: XOF\ndefault_provider: CINETPAY\n\nlogging:\n    enabled: true\n    level: info\n    file: logs/easyswitch.log\n    console: true\n    rotate: true\n    compress: true\n    format: plain\n\n# Configure Providers\nproviders:\n    # CinetPay Configs\n    CINETPAY:\n        api_key: your_cinetpay_api_key\n        base_url: https://sandbox.example.com/api\n        callback_url: https://example.com/callback\n        environment: sandbox\n        extra:\n            secret: your_cinetpay_secret_key\n            site_id: your_cinetpay_site_id\n            channels: ALL\n            lang: fr\n\n    # Semoa Configs\n    SEMOA:\n        api_key: your_semoa_api_key\n        base_url: https://api.stripe.com\n        environment: production\n        extra:\n            client_id: your_semoa_client_id\n            client_secret: your_semoa_client_secret\n            username: your_semoa_username\n            password: your_semoa_password\n</code></pre> <pre><code>client = EasySwitch.from_yaml(\"config.yaml\")\n</code></pre>"},{"location":"getting-started/configuration/#creating-new-configuration-source","title":"Creating new configuration source","text":""},{"location":"getting-started/configuration/#baseconfigsource","title":"\ud83d\udd0c <code>BaseConfigSource</code>","text":"<p>Abstract base class used to implement custom configuration sources, such as files, environment variables, remote services, etc.</p> <pre><code>from easyswitch.conf import register_source\n\n# Use @register_source decorator to regiter \n# your config source loader class\n@register_source('toml')\nclass MyTomlConfigSource(BaseConfigSource):\n    def __init__(self, path: str):\n        self.path = path\n\n    def is_valid(self) -&gt; bool:\n        return Path(self.path).exists()\n\n    def load(self) -&gt; Dict[str, Any]:\n        with open(self.path, 'r') as f:\n            return toml.safe_load(f)\n</code></pre>"},{"location":"getting-started/configuration/#usage-example","title":"\ud83e\uddea Usage Example","text":"<pre><code>from easyswitch.conf import CommandManager\nfrom my_source import MyTomlConfigSource\nfrom easyswitch import EasySwwitch\n\n# Create config manager using MyTomlConfigSource tag 'toml'\nmanager = CommandManager.add_source(\n    'toml',                 # Which references MyTomlConfigSource class\n    path = \"config.toml\"    # .toml file path\n).load()\n\n# Use it to configure client\nclient = EasySwitch(config = manager.get_config())\n...\n</code></pre>"},{"location":"getting-started/configuration/#summary","title":"\u2705 Summary","text":"<p>The EasySwitch configuration system is:</p> <ul> <li>\u2705 Strongly typed</li> <li>\u2705 Automatically validated</li> <li>\u2705 Flexible and extensible</li> <li>\u2705 Safe and secure</li> </ul> <p>It gives you full control over how payment providers are integrated and managed in your applications.</p> <p>For more details on how to use the <code>RootConfig</code> object with other parts of the SDK, check the API Reference.</p>"},{"location":"getting-started/installation/","title":"Install EasySwitch","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li> Python &gt;=3.9</li> <li> Package manager (<code>pip</code> or <code>uv</code> recommanded)</li> <li> API credentials for any supported payment provider (PayGate, FedaPay, etc.)</li> </ul>"},{"location":"getting-started/installation/#install","title":"Install","text":"Using pip (standard) <pre><code>pip install easyswitch\n</code></pre> Using UV (ultra-fast) <pre><code># First install UV\npip install uv\n\n# Then install EasySwitch\nuv pip install easyswitch\n\n# Or \nuv add easyswitch\n</code></pre> Install from sources <pre><code>git clone https://github.com/your-repo/easyswitch.git\ncd easyswitch\npip install -e .[dev]  # Development mode\n</code></pre>"},{"location":"getting-started/installation/#check-installation","title":"Check installation","text":"<pre><code>import easyswitch\nprint(easyswitch.__version__)\n# Example output: '1.0.0'\n</code></pre>"}]}